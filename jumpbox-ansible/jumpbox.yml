---
  # Launch instances, runs some tasks
  # and then terminate them
  
  - name: Create a sandbox instance
    hosts: local
    gather_facts: False
    vars:
      vpc_id : "{{ jumpbox_vpc_id }}"
      keypair: "{{ sshkeyname }}"
      instance_type: m1.small
      security_group_name: allow_ssh
#      image: ami-0d5eff06f840b45e9
#      region: us-east-1
    tasks:
      - name: Create Keypair
        amazon.aws.ec2_key:
          name: "{{ keypair }}"
          key_material: "{{ sshkeyvalue }}"
          region: "{{ region }}"

      - name: SSH security group rule descriptions
        amazon.aws.ec2_group:
          name: "{{ security_group_name }}"
          description: sg port 22
          vpc_id: "{{ vpc_id }}"
          region: "{{ region }}"
          rules:
            - proto: tcp
              ports:
              - 22
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on port 22

      - name: Launch instance
        amazon.aws.ec2:
          key_name: "{{ keypair }}"
          group: "{{ security_group_name }}"
          instance_type: "{{ instance_type }}"
          image: "{{ image }}"
          wait: true
          region: "{{ region }}"
          vpc_subnet_id: subnet-0785d96fd84d90284
          assign_public_ip: yes
          instance_tags:
            Name: JumpBoxSSH
            AnsibleGroup: jumpboxes
        register: ec2

      - name: Add new instance to host group
        add_host:
          hostname: "{{ item.public_ip }}"
          groupname: launched
        loop: "{{ ec2.instances }}"

      #either you run the playbook with ANSIBLE_HOST_KEY_CHECKING=False or do the following
      # - name: accept new ssh fingerprints                                         
      #   shell: ssh-keyscan -H {{ item.public_ip }} >> ~/.ssh/known_hosts          
      #   with_items: "{{ ec2.instances }}"

      - name: Wait for SSH to come up
        delegate_to: "{{ item.public_ip }}"
        wait_for_connection:
          delay: 10
          timeout: 60
        loop: "{{ ec2.instances }}"

  - name: Configure instance(s)
    hosts: launched
    become: True
    gather_facts: True
    #roles:
    #  - my_awesome_role
    #  - my_awesome_test

  - name: Terminate instances
    hosts: localhost
    tasks:
      - name: Terminate instances that were previously launched
        amazon.aws.ec2:
          state: 'absent'
          instance_ids: '{{ ec2.instance_ids }}'
          region: "{{ region }}"
